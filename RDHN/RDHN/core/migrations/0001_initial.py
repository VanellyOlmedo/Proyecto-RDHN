# Generated by Django 5.2.7 on 2025-10-14 21:57

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Rol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_rol', models.CharField(max_length=50, unique=True)),
                ('descripcion', models.TextField(blank=True, null=True)),
                ('estado', models.BooleanField(default=True)),
                ('creado_en', models.DateTimeField(auto_now_add=True)),
                ('actualizado_en', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Rol',
                'verbose_name_plural': 'Roles',
                'db_table': 'ROLES',
            },
        ),
        migrations.CreateModel(
            name='CatEstado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dominio', models.CharField(db_index=True, max_length=50)),
                ('codigo', models.CharField(db_index=True, max_length=50)),
                ('nombre', models.CharField(max_length=100)),
                ('es_final', models.BooleanField(default=False, help_text='Indica si es un estado final (no permite más transiciones)')),
                ('orden', models.IntegerField(blank=True, help_text='Orden de visualización', null=True)),
                ('permite_transicion_a', models.ManyToManyField(blank=True, help_text='Estados a los que puede transicionar', related_name='transiciones_desde', to='core.catestado')),
            ],
            options={
                'verbose_name': 'Estado',
                'verbose_name_plural': 'Estados',
                'db_table': 'CAT_ESTADO',
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('usuario', models.CharField(db_index=True, max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Usuario debe tener al menos 4 caracteres alfanuméricos o guión bajo', regex='^[a-zA-Z0-9_]{4,}$')])),
                ('email', models.EmailField(db_index=True, max_length=100, unique=True)),
                ('password_updated_at', models.DateTimeField(blank=True, null=True)),
                ('password_expira_dias', models.IntegerField(default=90, help_text='Días hasta que expire la contraseña', validators=[django.core.validators.MinValueValidator(0)])),
                ('ultimo_acceso', models.DateTimeField(blank=True, null=True)),
                ('intentos_fallidos', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('bloqueado_hasta', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('requiere_cambio_password', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Es staff')),
                ('token_recuperacion', models.CharField(blank=True, max_length=100, null=True)),
                ('token_expira', models.DateTimeField(blank=True, null=True)),
                ('creado_en', models.DateTimeField(auto_now_add=True)),
                ('actualizado_en', models.DateTimeField(auto_now=True)),
                ('two_factor_enabled', models.BooleanField(default=True, verbose_name='2FA Habilitado')),
                ('two_factor_code', models.CharField(blank=True, max_length=6, null=True)),
                ('two_factor_code_expira', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='Los grupos a los que pertenece este usuario.', related_name='usuarios_custom', related_query_name='usuario_custom', to='auth.group', verbose_name='grupos')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Permisos específicos para este usuario.', related_name='usuarios_custom', related_query_name='usuario_custom', to='auth.permission', verbose_name='permisos de usuario')),
                ('id_estado', models.ForeignKey(blank=True, limit_choices_to={'dominio': 'USUARIO'}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='usuarios', to='core.catestado')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'USUARIOS',
            },
        ),
        migrations.CreateModel(
            name='ParametroSistema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scope', models.CharField(choices=[('GLOBAL', 'Global'), ('SOCIO', 'Por Socio'), ('MODULO', 'Por Módulo')], default='GLOBAL', max_length=20)),
                ('modulo', models.CharField(db_index=True, max_length=50)),
                ('nombre_parametro', models.CharField(max_length=100)),
                ('tipo_dato', models.CharField(choices=[('STRING', 'Texto'), ('INT', 'Entero'), ('DECIMAL', 'Decimal'), ('BOOL', 'Booleano'), ('JSON', 'JSON')], default='STRING', max_length=10)),
                ('valor', models.TextField()),
                ('descripcion', models.TextField(blank=True, null=True)),
                ('activo', models.BooleanField(default=True)),
                ('creado_en', models.DateTimeField(auto_now_add=True)),
                ('actualizado_en', models.DateTimeField(auto_now=True)),
                ('actualizado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='parametros_actualizados', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Parámetro del Sistema',
                'verbose_name_plural': 'Parámetros del Sistema',
                'db_table': 'PARAMETROS_SISTEMA',
            },
        ),
        migrations.CreateModel(
            name='Socio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_socio', models.CharField(db_index=True, max_length=20, unique=True)),
                ('primer_nombre', models.CharField(max_length=50)),
                ('segundo_nombre', models.CharField(blank=True, max_length=50, null=True)),
                ('primer_apellido', models.CharField(max_length=50)),
                ('segundo_apellido', models.CharField(blank=True, max_length=50, null=True)),
                ('identidad', models.CharField(db_index=True, max_length=13, unique=True, validators=[django.core.validators.RegexValidator(message='La identidad debe tener exactamente 13 dígitos', regex='^\\d{13}$')])),
                ('direccion', models.TextField(blank=True, null=True)),
                ('fecha_ingreso', models.DateField()),
                ('fecha_egreso', models.DateField(blank=True, null=True)),
                ('creado_en', models.DateTimeField(auto_now_add=True)),
                ('actualizado_en', models.DateTimeField(auto_now=True)),
                ('creado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='socios_creados', to=settings.AUTH_USER_MODEL)),
                ('id_estado', models.ForeignKey(blank=True, limit_choices_to={'dominio': 'SOCIO'}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='socios', to='core.catestado')),
            ],
            options={
                'verbose_name': 'Socio',
                'verbose_name_plural': 'Socios',
                'db_table': 'SOCIO',
            },
        ),
        migrations.CreateModel(
            name='ExpedienteDigital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_expediente', models.CharField(max_length=20, unique=True)),
                ('fecha_creacion', models.DateField()),
                ('observaciones', models.TextField(blank=True, null=True)),
                ('creado_en', models.DateTimeField(auto_now_add=True)),
                ('actualizado_en', models.DateTimeField(auto_now=True)),
                ('socio', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='expediente', to='core.socio')),
            ],
            options={
                'verbose_name': 'Expediente Digital',
                'verbose_name_plural': 'Expedientes Digitales',
                'db_table': 'EXPEDIENTE_DIGITAL',
            },
        ),
        migrations.AddField(
            model_name='usuario',
            name='socio',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='usuario', to='core.socio'),
        ),
        migrations.CreateModel(
            name='SocioContacto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('TELEFONO', 'Teléfono'), ('CELULAR', 'Celular'), ('EMAIL', 'Email'), ('DIRECCION', 'Dirección')], db_index=True, max_length=20)),
                ('valor', models.CharField(max_length=255)),
                ('preferido', models.BooleanField(default=False)),
                ('activo', models.BooleanField(default=True)),
                ('creado_en', models.DateTimeField(auto_now_add=True)),
                ('actualizado_en', models.DateTimeField(auto_now=True)),
                ('socio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contactos', to='core.socio')),
            ],
            options={
                'verbose_name': 'Contacto de Socio',
                'verbose_name_plural': 'Contactos de Socios',
                'db_table': 'SOCIO_CONTACTO',
            },
        ),
        migrations.CreateModel(
            name='UsuarioRol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_asignacion', models.DateField(null=True)),
                ('fecha_revocacion', models.DateField(blank=True, null=True)),
                ('estado', models.BooleanField(default=True)),
                ('creado_en', models.DateTimeField(auto_now_add=True)),
                ('asignado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='asignaciones_realizadas', to=settings.AUTH_USER_MODEL)),
                ('rol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rol_usuarios', to='core.rol')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usuario_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Usuario-Rol',
                'verbose_name_plural': 'Usuarios-Roles',
                'db_table': 'USUARIO_ROL',
            },
        ),
        migrations.AddField(
            model_name='usuario',
            name='roles',
            field=models.ManyToManyField(blank=True, related_name='usuarios', through='core.UsuarioRol', through_fields=('usuario', 'rol'), to='core.rol'),
        ),
        migrations.CreateModel(
            name='BitacoraAuditoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accion', models.CharField(choices=[('CREAR', 'Crear'), ('EDITAR', 'Editar'), ('ELIMINAR', 'Eliminar'), ('APROBAR', 'Aprobar'), ('RECHAZAR', 'Rechazar'), ('REVERSAR', 'Reversar'), ('LOGIN', 'Inicio de Sesión'), ('LOGOUT', 'Cierre de Sesión'), ('CAMBIO_PASSWORD', 'Cambio de Contraseña')], db_index=True, max_length=50)),
                ('tabla_afectada', models.CharField(db_index=True, max_length=100)),
                ('id_registro', models.CharField(db_index=True, max_length=50)),
                ('descripcion', models.TextField()),
                ('datos_anteriores', models.JSONField(blank=True, null=True)),
                ('datos_nuevos', models.JSONField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('request_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('fecha_hora', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('usuario', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='acciones_auditoria', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Bitácora de Auditoría',
                'verbose_name_plural': 'Bitácoras de Auditoría',
                'db_table': 'BITACORA_AUDITORIA',
                'ordering': ['-fecha_hora'],
                'indexes': [models.Index(fields=['tabla_afectada', 'id_registro'], name='BITACORA_AU_tabla_a_6aacaa_idx'), models.Index(fields=['usuario', '-fecha_hora'], name='BITACORA_AU_usuario_cf34ef_idx'), models.Index(fields=['accion', '-fecha_hora'], name='BITACORA_AU_accion_b258dc_idx'), models.Index(fields=['-fecha_hora'], name='BITACORA_AU_fecha_h_b52e73_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='catestado',
            index=models.Index(fields=['dominio', 'codigo'], name='CAT_ESTADO_dominio_ecec23_idx'),
        ),
        migrations.AddIndex(
            model_name='catestado',
            index=models.Index(fields=['dominio', 'orden'], name='CAT_ESTADO_dominio_d64cf7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='catestado',
            unique_together={('dominio', 'codigo')},
        ),
        migrations.AddIndex(
            model_name='parametrosistema',
            index=models.Index(fields=['modulo', 'nombre_parametro'], name='PARAMETROS__modulo_5fe7a4_idx'),
        ),
        migrations.AddIndex(
            model_name='parametrosistema',
            index=models.Index(fields=['scope', 'activo'], name='PARAMETROS__scope_17c1f7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='parametrosistema',
            unique_together={('scope', 'nombre_parametro', 'modulo')},
        ),
        migrations.AddIndex(
            model_name='socio',
            index=models.Index(fields=['numero_socio'], name='SOCIO_numero__5f59a1_idx'),
        ),
        migrations.AddIndex(
            model_name='socio',
            index=models.Index(fields=['identidad'], name='SOCIO_identid_a9b5e0_idx'),
        ),
        migrations.AddIndex(
            model_name='socio',
            index=models.Index(fields=['id_estado'], name='SOCIO_id_esta_c5a1c6_idx'),
        ),
        migrations.AddIndex(
            model_name='socio',
            index=models.Index(fields=['-fecha_ingreso'], name='SOCIO_fecha_i_368470_idx'),
        ),
        migrations.AddConstraint(
            model_name='socio',
            constraint=models.CheckConstraint(condition=models.Q(('fecha_egreso__isnull', True), ('fecha_egreso__gte', models.F('fecha_ingreso')), _connector='OR'), name='chk_socio_fecha_egreso_ge_ingreso'),
        ),
        migrations.AddIndex(
            model_name='sociocontacto',
            index=models.Index(fields=['socio', 'tipo', 'activo'], name='SOCIO_CONTA_socio_i_5a677c_idx'),
        ),
        migrations.AddIndex(
            model_name='sociocontacto',
            index=models.Index(fields=['tipo', 'preferido'], name='SOCIO_CONTA_tipo_f50871_idx'),
        ),
        migrations.AddConstraint(
            model_name='sociocontacto',
            constraint=models.UniqueConstraint(condition=models.Q(('activo', True), ('preferido', True)), fields=('socio', 'tipo'), name='uq_contacto_preferido_por_tipo'),
        ),
        migrations.AddIndex(
            model_name='usuariorol',
            index=models.Index(fields=['usuario', 'estado'], name='USUARIO_ROL_usuario_789c51_idx'),
        ),
        migrations.AddIndex(
            model_name='usuariorol',
            index=models.Index(fields=['rol', 'estado'], name='USUARIO_ROL_rol_id_a9a337_idx'),
        ),
        migrations.AddConstraint(
            model_name='usuariorol',
            constraint=models.UniqueConstraint(fields=('usuario', 'rol'), name='uq_usuario_rol_unico'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['usuario'], name='USUARIOS_usuario_0b04e4_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['email'], name='USUARIOS_email_670c6c_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['is_active', 'is_staff'], name='USUARIOS_is_acti_b184c1_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['bloqueado_hasta'], name='USUARIOS_bloquea_34ed04_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['id_estado'], name='USUARIOS_id_esta_318bc1_idx'),
        ),
        migrations.AddConstraint(
            model_name='usuario',
            constraint=models.CheckConstraint(condition=models.Q(('intentos_fallidos__gte', 0)), name='chk_intentos_no_negativo'),
        ),
    ]
